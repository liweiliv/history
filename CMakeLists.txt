project(World)
cmake_minimum_required(VERSION 2.8)

SET(CMAKE_C_FLAGS "$ENV{CXXFLAGS} -g -Wall -fpic --std=gnu99")
SET(CMAKE_CXX_FLAGS "$ENV{CXXFLAGS} -g -Wall -fpic --std=c++11")

SET(EXECUTABLE_OUTPUT_PATH bin)
SET(LIBRARY_OUTPUT_PATH lib)

aux_source_directory(. TOP_SRC)
aux_source_directory(./g G_SRC)
aux_source_directory(./util UTIL_SRC)
aux_source_directory(./util/memlib MEMLIB_SRC)

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    ADD_DEFINITIONS(-DUSE_GLFW)
    ADD_DEFINITIONS(-D__LINUX__)
    aux_source_directory(./util/linux_platform UTIL_PLATFORM)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows")
    ADD_DEFINITIONS(-DUSE_GLFW)
    ADD_DEFINITIONS(-D__WINDOWS__)
    aux_source_directory(./util/windows_platform UTIL_PLATFORM)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD") 
    ADD_DEFINITIONS(-DUSE_GLFW)
    ADD_DEFINITIONS(-D__BSD__)
    aux_source_directory(./util/linux_platform UTIL_PLATFORM)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin") 
    ADD_DEFINITIONS(-DUSE_GLFW)
    ADD_DEFINITIONS(-D__MAC__)
    aux_source_directory(./util/linux_platform UTIL_PLATFORM)
ELSE ()
    MESSAGE(FATAL_ERROR "unknow platform: ${CMAKE_SYSTEM_NAME}")
    aux_source_directory(./util/linux_platform UTIL_PLATFORM)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

add_library(util SHARED ${UTIL_SRC} ${UTIL_PLATFORM})
add_library(memlib SHARED ${MEMLIB_SRC})

include_directories(util util/memlib)
add_library(Gengin SHARED ${G_SRC})
target_link_libraries(Gengin util memlib)
find_library(LIBGLEW glew)
if (NOT LIBGLEW)
    find_library(LIBGLEW GLEW)
    if (NOT LIBGLEW)
        message(FATAL_ERROR "glew not found")
    endif()
endif()
target_link_libraries(Gengin ${LIBGLEW})

IF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    find_library(OPENGL OpenGL)
    if (NOT OPENGL)
        message(FATAL_ERROR "OpenGL not found")
    endif()
    target_link_libraries(Gengin ${OPENGL})
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Darwin")


include_directories(g)

ADD_EXECUTABLE(World ${TOP_SRC})
IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_link_libraries(World X11 Xrandr Xxf86vm Xcursor Xi Xinerama)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_link_libraries(World pthread dl)
    target_link_libraries(World GL)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Windows") 
    target_link_libraries(World windows)
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "Darwin") 
    target_link_libraries(World pthread dl)
    find_library(CF CoreFoundation)
    if (NOT CF)
        message(FATAL_ERROR "CoreFoundation not found")
    endif()
    find_library(CG CoreGraphics)
    if (NOT CG)
        message(FATAL_ERROR "CoreGraphics not found")
    endif()
    find_library(CV CoreVideo)
    if (NOT CV)
        message(FATAL_ERROR "CoreVideo not found")
    endif()
    find_library(IOK IOKit)
    if (NOT IOK)
        message(FATAL_ERROR "IOKit not found")
    endif()
    find_library(AK APPKit)
    if (NOT AK)
        message(FATAL_ERROR "APPKit not found")
    endif()
    target_link_libraries(World ${CF} ${CG} ${CV} ${IOK} ${AK})
ELSEIF (CMAKE_SYSTEM_NAME MATCHES "FreeBSD") 
    target_link_libraries(World pthread dl)
ELSE ()
    MESSAGE(FATAL_ERROR "unknow platform: ${CMAKE_SYSTEM_NAME}")
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")

target_link_libraries(World glfw3 GLEW)
target_link_libraries(World util Gengin memlib)


